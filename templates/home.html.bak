<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cash Flow Tracker</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- set the css style for userinfo on top right corner, and fade-out effect -->
    <style>
        .user-info{
            position: absolute;
            top: 10px;
            right: 10px;
        }
        .fade-out {
            opacity: 1;
            transition: opacity 1s ease-out;
        }
        .hidden{
            opacity: 0;
        }
        .dragging{
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="user-info">
            <p>Hello, {{ user.username }}!</p>
            <p>Status: {{ status }}</p>
            <a href="{{ url_for('logout') }}">Logout</a>
        </div>

        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <div class="mt-3">
                    {% for category, message in messages %}
                        <div id="flash-message" class="alert alert-{{ category }} fade-out" role="alert">
                            {{ message }}
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        {% endwith %}

        <h2>Cash Flow Tracker</h2>
        <!-- Form to set the initial balance -->
        <form method="POST" action="/set-initial-balance">
            <div class="mb-3">
                <label for="initial_balance" class="form-label">Initial Balance</label>
                <input type="number" step="0.01" class="form-control" id="initial_balance" name="initial_balance" required>
            </div>
            <button type="submit" class="btn btn-secondary">Set Initial Balance</button>
        </form>
        <hr>

        <!-- Form to set the transaction details -->
        <form method="POST">
            <div class="mb-3">
                <label for="date" class="form-label">Date</label>
                <input type="date" class="form-control" id="date" name="date" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <input type="text" class="form-control" id="description" name="description" required>
            </div>
            <div class="mb-3">
                <label for="amount" class="form-label">Amount</label>
                <input type="number" step="0.01" class="form-control" id="amount" name="amount" required>
            </div>
            <div class="mb-3">
                <select class="form-select" id="type" name="type">
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Add Transaction</button>
        </form>

        <hr>

        <h3>Initial Balance: ${{ initial_balance }}</h3>
        <h3>Current Balance: ${{ balance }}</h3>

        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Description</th>
                    <th scope="col">Amount</th>
                    <th scope="col">Type</th>
                </tr>
            </thead>
            <tbody>
                {% for transaction in transactions %}
                <tr draggable="true">
                    <td>{{ transaction.date }}</td>
                    <td>{{ transaction.description }}</td>
                    <td>{{ transaction.amount }}</td>
                    <td>{{ transaction.type }}</td>
                    <td>
                        <a href="{{ url_for('edit_transaction', transaction_id=transaction.id) }}" class="btn btn-primary">Edit</a>
                        <form action="{{  url_for('delete_transaction', transaction_id=transaction.id)  }}" method="POST" style="display:inline;">
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- JavaScript to auto-dismiss flash message after 3 seconds -->
    <script>
        // Gradully fade out the flash messge in JS
        window.onload = function(){
            setTimeout(function(){
                var flashMessages = document.querySelectorAll('.alert');
                flashMessages.forEach(function(message){
                    message.classList.add('hidden');
                });
            }, 3000);
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            const table = document.getElementById('transactionTable');
            let draggingRow = null;

            table.addEventListener('dragstart',(e) => {
                draggingRow = e.target.closest('tr');
                draggingRow.classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
            });

            table.addEventListener('dragover',(e) => {
                e.preventDefault();
                const afterElement = getDragAfterElement(table, e.clientY);
                const draggable = document.querySelectorAll('.dragging');
                if (afterElement == null){
                    table.querySelector('tbody').appendChild(draggable);
                }else {
                    table.querySelector('tbody').insertBefore(draggable,afterElement)
                }
            });

            table.addEventListener('dragged', () => {
                draggingRow.classList.remove('dragging');
                draggingRow = null;
            });

            function getDragAfterElement(table, y) {
                const draggableElements = [...table.querySelectorAll('tr:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;
                    if (offset < 0 && offset > closest.offset){
                        return { offset: offset,element:child};
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }
        });
    </script>
</body>
</html>
